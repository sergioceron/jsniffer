/*
 * JSniffer.java
 *
 * Created on Sep 23, 2009, 11:22:07 PM
 */
package jsniffer;

import java.awt.Rectangle;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.net.InetAddress;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import jpcap.JpcapCaptor;
import jpcap.NetworkInterfaceAddress;
import jpcap.PacketReceiver;
import jpcap.packet.DatalinkPacket;
import jpcap.packet.EthernetPacket;
import jpcap.packet.ICMPPacket;
import jpcap.packet.IPPacket;
import jpcap.packet.Packet;
import jpcap.packet.TCPPacket;
import jpcap.packet.UDPPacket;

/**
 *
 * @author Sergio Ceron Figueroa
 */
public class JSniffer extends javax.swing.JFrame {

    private Capturador capturer = null;
    /** Creates new form JSniffer */
    public JSniffer() {
        initComponents();
        jpcap.NetworkInterface[] devices = JpcapCaptor.getDeviceList();

        for (int i = 0; i < devices.length; i++) {
            String device = devices[i].name + "(" + devices[i].description + ")";
            for (NetworkInterfaceAddress a : devices[i].addresses) {
                device += " IP:" + a.address;
            }
            interfaces.addItem(device);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        trafico = new javax.swing.JTable();
        filtro = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        apply = new javax.swing.JButton();
        detener = new javax.swing.JButton();
        iniciar = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        interfaces = new javax.swing.JComboBox();
        promiscuo = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        trafico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo", "Segmento", "IP Src", "IP Dst", "Datos"
            }
        ));
        jScrollPane1.setViewportView(trafico);

        filtro.setEnabled(false);

        jLabel1.setText("Filtro");

        apply.setText("Aplicar");
        apply.setEnabled(false);
        apply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyActionPerformed(evt);
            }
        });

        detener.setBackground(new java.awt.Color(255, 0, 51));
        detener.setText("Detener");
        detener.setEnabled(false);
        detener.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detenerActionPerformed(evt);
            }
        });

        iniciar.setBackground(new java.awt.Color(0, 204, 0));
        iniciar.setText("Iniciar");
        iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iniciarActionPerformed(evt);
            }
        });

        jLabel2.setText("Interfaz");

        promiscuo.setText("Modo promiscuo");

        jButton1.setText("Ver estadisticas");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenu1.setText("Archivo");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 793, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(1, 1, 1)
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(filtro, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
                                .addGap(5, 5, 5)
                                .addComponent(apply, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(interfaces, 0, 491, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(promiscuo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(iniciar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(detener))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(342, 342, 342)
                        .addComponent(jButton1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filtro, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(apply)
                    .addComponent(jLabel1))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(interfaces, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(detener)
                    .addComponent(iniciar)
                    .addComponent(promiscuo))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iniciarActionPerformed
        capturer = new Capturador( trafico, interfaces.getSelectedIndex(), promiscuo.isSelected() );
        capturer.start();
        
        detener.setEnabled(true);
        iniciar.setEnabled(false);
        filtro.setEnabled(true);
        apply.setEnabled(true);
        promiscuo.setEnabled(false);
        interfaces.setEnabled(false);
    }//GEN-LAST:event_iniciarActionPerformed

    private void applyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyActionPerformed
        try {
            capturer.setFilter(filtro.getText());
        } catch (IOException ex) {
            Logger.getLogger(JSniffer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_applyActionPerformed

    private void detenerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detenerActionPerformed
        capturer.freeze();

        detener.setEnabled(false);
        iniciar.setEnabled(true);
        filtro.setEnabled(false);
        apply.setEnabled(false);
        promiscuo.setEnabled(true);
        interfaces.setEnabled(true);
    }//GEN-LAST:event_detenerActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Map<String, Integer> t = capturer.getTramas();
        Map<String, Integer> s = capturer.getSegmentos();
        Map<String, Integer> o = capturer.getOrigenes();
        Map<String, Integer> d = capturer.getDestinos();
        Map<String, Integer> po = capturer.getPuertoso();
        Map<String, Integer> pd = capturer.getPuertosd();

        for( String key : t.keySet() )
            System.out.println(key + ": " + t.get(key));
        System.out.println("-----------------------------------");
        for( String key : s.keySet() )
            System.out.println(key + ": " + s.get(key));
        System.out.println("-----------------------------------");
        for( String key : o.keySet() )
            System.out.println(key + ": " + o.get(key));
        System.out.println("-----------------------------------");
        for( String key : d.keySet() )
            System.out.println(key + ": " + d.get(key));
        System.out.println("-----------------------------------");
        for( String key : po.keySet() )
            System.out.println(key + ": " + po.get(key));
        System.out.println("-----------------------------------");
        for( String key : pd.keySet() )
            System.out.println(key + ": " + pd.get(key));
        System.out.println("-----------------------------------");
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new JSniffer().setVisible(true);
            }
        });
    }

    class Capturador extends Thread implements PacketReceiver {

        private JpcapCaptor jpcap = null;
        private JTable traffic = null;
        private int interfaz = 0;
        private boolean promiscuo = false;
        // Estadisticas
        private Map<String, Integer> tramas = new HashMap<String, Integer>();
        private Map<String, Integer> segmentos = new HashMap<String, Integer>();
        private Map<String, Integer> origenes = new HashMap<String, Integer>();
        private Map<String, Integer> destinos = new HashMap<String, Integer>();
        private Map<String, Integer> puertoso = new HashMap<String, Integer>();
        private Map<String, Integer> puertosd = new HashMap<String, Integer>();

        public Capturador(JTable traffic, int interfaz, boolean p) {
            this.traffic = traffic;
            this.interfaz = interfaz;
            this.promiscuo = p;
        }

        public void receivePacket(Packet packet) {
            Object paquete[] = new Object[5];
            Map v = parsePacket(packet);
            paquete[0] = v.get("trama");
            paquete[1] = v.get("segmento");
            paquete[2] = v.get("origen") + (v.get("psrc")!=null ? " ("+v.get("psrc")+")" : "");
            paquete[3] = v.get("destino") + (v.get("pdst")!=null ? " ("+v.get("pdst")+")" : "");
            paquete[4] = v.get("mensaje");
            DefaultTableModel tm = (DefaultTableModel) traffic.getModel();
            tm.addRow(paquete);
            traffic.setModel(tm);
            Rectangle rect = traffic.getCellRect(tm.getRowCount()-1, 4, true);
            traffic.scrollRectToVisible(rect);
            traffic.clearSelection();
            traffic.setRowSelectionInterval(tm.getRowCount()-1, tm.getRowCount()-1);

            updateStats(tramas, v, "trama");
            updateStats(segmentos, v, "segmento");
            updateStats(origenes, v, "origen");
            updateStats(destinos, v, "destino");
            if(v.get("psrc")!=null)
                updateStats(puertoso, v, "psrc");
            if(v.get("psrc")!=null )
                updateStats(puertosd, v, "pdst");
        }

        private void updateStats(Map<String, Integer> u, Map v, String key){
            int c;
            if( v.get(key) == null || v.get(key).equals("") )
                return;
            
            if( u.containsKey(v.get(key).toString()) ){
                c = u.get(v.get(key).toString());
                c++;
                u.remove(v.get(key).toString());
                u.put(v.get(key).toString(), c);
            }else
                u.put((String) v.get(key), 1);
        }

        public void setFilter(String filter) throws IOException {
            jpcap.setFilter(filter, true);
        }

        public void freeze() {
            jpcap.breakLoop();
            jpcap.close();
            jpcap = null;
        }

        @Override
        public void run() {
            jpcap.NetworkInterface[] devices = JpcapCaptor.getDeviceList();

            try {
                jpcap = JpcapCaptor.openDevice(devices[interfaz], 2000, promiscuo, 20);
                jpcap.loopPacket(-1, this);
            } catch (IOException ex) {
                Logger.getLogger(JSniffer.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        public Map parsePacket(Packet packet) {
            Map m = new HashMap();
            DatalinkPacket dl = packet.datalink;
            EthernetPacket ep = (EthernetPacket) dl;

            m.put("origen", ep.getSourceAddress());
            m.put("destino", ep.getDestinationAddress());

            short tipo_trama = ep.frametype;
            switch (tipo_trama) {
                case 2054:
                    m.put("trama", "Trama ARP");
                    break;
                case 2048:
                    m.put("trama", "Trama IP");
                    IPPacket ip = (IPPacket) packet;
                    InetAddress src = ip.src_ip;
                    InetAddress dst = ip.dst_ip;
                    m.put("origen", src.getHostAddress());
                    m.put("destino", dst.getHostAddress());
                    short protocolo = ip.protocol;
                    switch (protocolo) {
                        case 1:
                            m.put("segmento", "Segmento ICMP");
                            ICMPPacket icmp = (ICMPPacket) ip;
                            switch (icmp.type) {
                                case ICMPPacket.ICMP_ECHO:
                                    m.put("mensaje", "Solicitud de eco");
                                    break;
                                case ICMPPacket.ICMP_ECHOREPLY:
                                    m.put("mensaje", "Respuesta de eco");
                                    break;
                                case ICMPPacket.ICMP_UNREACH_HOST:
                                    m.put("mensaje", "Destino inalcanzable");
                                    break;
                                case ICMPPacket.ICMP_TIMXCEED:
                                    m.put("mensaje", "Tiempo excedido");
                                    break;
                                case ICMPPacket.ICMP_UNREACH_HOST_UNKNOWN:
                                    m.put("mensaje", "Host desconocido");
                                    break;
                                default:
                                    m.put("mensaje", "Mensaje ICMP desconocido...");
                                    break;
                            }
                            break;
                        case 2:
                            m.put("segmento", "Segmento IGMP");
                            break;
                        case 4:
                            m.put("segmento", "Segmento IP en IP");
                            break;
                        case 6:
                            m.put("segmento", "Segmento TCP");
                            TCPPacket tcp = (TCPPacket) ip;
                            m.put("psrc", tcp.src_port + "");
                            m.put("pdst", tcp.dst_port + "");
                            //int long_datos = packet.data.length;
                            try {
                                DataInputStream dis = new DataInputStream(new ByteArrayInputStream(packet.data));
                                String msg = "";
                                String linea;
                                while ((linea = dis.readLine()) != null) {
                                    msg += linea;
                                }
                                dis.close();
                                m.put("mensaje", msg);
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            break;
                        case 17:
                            m.put("segmento", "Segmento UDP");
                            UDPPacket udp = (UDPPacket) ip;
//                        System.out.println("Puerto origen: " + udp.src_port + " Puerto destino: " + udp.dst_port);
                            try {
                                DataInputStream dis = new DataInputStream(new ByteArrayInputStream(packet.data));
                                String linea;
                                String msg = "";
                                while ((linea = dis.readLine()) != null) {
                                    msg += linea;
                                }
                                dis.close();
                                m.put("mensaje", msg);
                            } catch (IOException e) {
                                e.printStackTrace();
                            }
                            break;
                        case 41:
                            m.put("segmento", "Segmento IPv6");
                            break;
                        default:
                            m.put("segmento", "Segmento desconocido");
                            break;
                    }
                    break;
                case -31011:
                    m.put("trama", "Trama LOOPBACK");
                    break;
                case -32715:
                    m.put("trama", "Trama RARP");
                    break;
                case -32512:
                    m.put("trama", "Trama VLAN");
                    break;
                default:
                    m.put("trama", "Trama Desconocida");
                    break;
            }
            return m;
        }

        public Map<String, Integer> getTramas() {
            return tramas;
        }

        public Map<String, Integer> getSegmentos() {
            return segmentos;
        }

        public Map<String, Integer> getOrigenes() {
            return origenes;
        }

        public Map<String, Integer> getDestinos() {
            return destinos;
        }

        public Map<String, Integer> getPuertoso() {
            return puertoso;
        }

        public Map<String, Integer> getPuertosd() {
            return puertosd;
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apply;
    private javax.swing.JButton detener;
    private javax.swing.JTextField filtro;
    private javax.swing.JButton iniciar;
    private javax.swing.JComboBox interfaces;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JCheckBox promiscuo;
    private javax.swing.JTable trafico;
    // End of variables declaration//GEN-END:variables
}
